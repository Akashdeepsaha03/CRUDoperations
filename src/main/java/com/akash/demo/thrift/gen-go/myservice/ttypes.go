// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package myservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int;

type Booktype int64
const (
  Booktype_FICTION Booktype = 0
  Booktype_DRAMA Booktype = 1
  Booktype_COMIC Booktype = 2
)

func (p Booktype) String() string {
  switch p {
  case Booktype_FICTION: return "FICTION"
  case Booktype_DRAMA: return "DRAMA"
  case Booktype_COMIC: return "COMIC"
  }
  return "<UNSET>"
}

func BooktypeFromString(s string) (Booktype, error) {
  switch s {
  case "FICTION": return Booktype_FICTION, nil 
  case "DRAMA": return Booktype_DRAMA, nil 
  case "COMIC": return Booktype_COMIC, nil 
  }
  return Booktype(0), fmt.Errorf("not a valid Booktype string")
}


func BooktypePtr(v Booktype) *Booktype { return &v }

func (p Booktype) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Booktype) UnmarshalText(text []byte) error {
q, err := BooktypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}
// Attributes:
//  - ID
//  - BookName
//  - AuthorName
//  - Type
type Mybook struct {
  ID int64 `thrift:"id,1" json:"id"`
  BookName string `thrift:"bookName,2,required" json:"bookName"`
  AuthorName string `thrift:"authorName,3" json:"authorName"`
  Type Booktype `thrift:"type,4" json:"type"`
}

func NewMybook() *Mybook {
  return &Mybook{}
}


func (p *Mybook) GetID() int64 {
  return p.ID
}

func (p *Mybook) GetBookName() string {
  return p.BookName
}

func (p *Mybook) GetAuthorName() string {
  return p.AuthorName
}

func (p *Mybook) GetType() Booktype {
  return p.Type
}
func (p *Mybook) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBookName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
      issetBookName = true
    case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBookName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BookName is not set"));
  }
  return nil
}

func (p *Mybook)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Mybook)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BookName = v
}
  return nil
}

func (p *Mybook)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AuthorName = v
}
  return nil
}

func (p *Mybook)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Booktype(v)
  p.Type = temp
}
  return nil
}

func (p *Mybook) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Mybook"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Mybook) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Mybook) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bookName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bookName: ", p), err) }
  if err := oprot.WriteString(string(p.BookName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bookName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bookName: ", p), err) }
  return err
}

func (p *Mybook) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authorName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authorName: ", p), err) }
  if err := oprot.WriteString(string(p.AuthorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authorName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authorName: ", p), err) }
  return err
}

func (p *Mybook) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  return err
}

func (p *Mybook) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Mybook(%+v)", *p)
}

// Attributes:
//  - ErrorMessage
type BookNotFoundException struct {
  ErrorMessage string `thrift:"errorMessage,1" json:"errorMessage"`
}

func NewBookNotFoundException() *BookNotFoundException {
  return &BookNotFoundException{}
}


func (p *BookNotFoundException) GetErrorMessage() string {
  return p.ErrorMessage
}
func (p *BookNotFoundException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BookNotFoundException)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorMessage = v
}
  return nil
}

func (p *BookNotFoundException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BookNotFoundException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BookNotFoundException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorMessage", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorMessage: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorMessage (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorMessage: ", p), err) }
  return err
}

func (p *BookNotFoundException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BookNotFoundException(%+v)", *p)
}

func (p *BookNotFoundException) Error() string {
  return p.String()
}

// Attributes:
//  - ErrorMessage
type BadRequest struct {
  ErrorMessage string `thrift:"errorMessage,1" json:"errorMessage"`
}

func NewBadRequest() *BadRequest {
  return &BadRequest{}
}


func (p *BadRequest) GetErrorMessage() string {
  return p.ErrorMessage
}
func (p *BadRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BadRequest)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorMessage = v
}
  return nil
}

func (p *BadRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BadRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BadRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorMessage", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorMessage: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorMessage (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorMessage: ", p), err) }
  return err
}

func (p *BadRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BadRequest(%+v)", *p)
}

func (p *BadRequest) Error() string {
  return p.String()
}

